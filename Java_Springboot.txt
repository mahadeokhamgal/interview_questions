** Core Java (30 Questions) **
------------------------------------------------------------------

What is the difference between JDK, JRE, and JVM?

Explain OOP principles with examples.

How does garbage collection work in Java?

What are String, StringBuilder, and StringBuffer?

Explain the difference between final, finally, and finalize().

How does the HashMap work internally in Java?

What is the difference between ArrayList and LinkedList?

Explain the concept of multithreading and the Thread lifecycle.

What is a functional interface? Give an example.

What is the significance of the static keyword?

How are exceptions handled in Java?

What is the purpose of the super keyword?

How does synchronized work in Java?

Explain equals() and hashCode() methods.

What are wrapper classes in Java?

How does Java ensure platform independence?

What is the difference between == and .equals()?

What is a volatile variable in Java?

What is the use of the transient keyword?

Explain the concept of the default method in interfaces (Java 8+).

How does the Java memory model work?

What are design patterns in Java? Name a few common ones.

What is the difference between checked and unchecked exceptions?

Explain how try-with-resources works in Java.

How are generics used in Java?

What is the Collections framework?

How does the Comparator interface work?

Explain the purpose of enum in Java.

How does reflection work in Java?

What are annotations, and how are they used in Java?


** Advanced Java (Java 8+) (25 Questions) **
----------------------------------------------------------------------------

What are the new features introduced in Java 8?

Explain the concept of lambda expressions.

What is the purpose of the Optional class?

How do streams work in Java?

What is the difference between intermediate and terminal stream operations?

Explain the use of the map and flatMap methods in streams.

How is method reference used in Java?

What is a functional interface?

How do you implement parallel streams?

Explain the purpose of the Collectors utility class.

What is the difference between forEach() and map() in streams?

How do you sort a list using streams?

Explain the concept of default and static methods in interfaces.

What is the Predicate functional interface?

How does the CompletableFuture work?

What is the purpose of the LocalDate and LocalTime classes in Java 8?

What is the difference between reduce() and collect() in streams?

Explain the concept of the @FunctionalInterface annotation.

What are parallel streams?

How does the Stream.filter() method work?

What is the BiConsumer functional interface?

How does the Instant class differ from Date?

What is the difference between Stream.findAny() and Stream.findFirst()?

How does the Collectors.toMap() method work?

Explain the concept of a Spliterator.



** Spring Boot (30 Questions) **
-------------------------------------------------------------------------

What is Spring Boot, and why is it used?

Explain the concept of dependency injection in Spring.

What is the purpose of the @SpringBootApplication annotation?

How does the Spring IoC container work?

What are Spring Boot starters?

Explain the difference between @Component, @Service, @Repository, and @Controller.

What is the purpose of the @RestController annotation?

How does Spring Boot handle configuration?

What are Spring profiles, and how are they used?

How do you implement exception handling in Spring Boot?

What is the purpose of the @RequestMapping annotation?

Explain how Spring Boot manages application properties.

What is the @Autowired annotation used for?

How do you configure a data source in Spring Boot?

What is the purpose of the @Entity annotation in JPA?

How does Spring Boot handle REST APIs?

Explain the difference between GET, POST, PUT, and DELETE in REST APIs.

How is @PathVariable different from @RequestParam?

What is the purpose of the @Transactional annotation?

How do you implement pagination in Spring Boot

What are Hibernate and JPA? How are they related?

How does caching work in Spring Boot?

Explain the concept of Actuators in Spring Boot.

What is the purpose of the @Bean annotation?

How do you secure a Spring Boot application?

What is the role of application.properties and application.yml files?

How does Spring Boot handle asynchronous tasks?

What is the ModelAndView object used for?

How does the @RequestBody annotation work?

Explain the use of DevTools in Spring Boot.

Constructor Injection vs Field Injection(Not recommended) vs Setter Injection (Optional).



** JUnit (15 Questions) **
-------------------------------------------------------------------

What is JUnit, and why is it used?

Explain the difference between unit testing and integration testing.

How do you write a simple JUnit test case?

What is the purpose of the @Test annotation?

How do you handle exceptions in JUnit tests?

What is the role of the assert methods in JUnit?

Explain the difference between @BeforeEach and @BeforeAll.

How do you test a method that returns void?

What is the purpose of @Mock and @InjectMocks in JUnit?

How do you use Mockito in JUnit?

What is the difference between @AfterEach and @AfterAll?

How do you test private methods in JUnit?

What is parameterized testing in JUnit?

How do you create a custom test suite in JUnit?

How does JUnit handle assertions for collections?
